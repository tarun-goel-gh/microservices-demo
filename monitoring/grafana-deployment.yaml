apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.3
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: microservices-dashboard
          mountPath: /var/lib/grafana/dashboards/default/microservices-dashboard.json
          subPath: microservices-dashboard.json
        - name: observability-dashboard
          mountPath: /var/lib/grafana/dashboards/default/observability-dashboard.json
          subPath: observability-dashboard.json
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: microservices-dashboard
        configMap:
          name: microservices-dashboard
      - name: observability-dashboard
        configMap:
          name: observability-dashboard
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp2
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: microservices-dashboard
  namespace: monitoring
data:
  microservices-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Microservices Demo - Overview",
        "tags": ["microservices", "ecommerce"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Service Health Overview",
            "type": "stat",
            "targets": [
              {
                "expr": "up{kubernetes_namespace=\"ecomm-prod\"}",
                "legendFormat": "{{job}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{kubernetes_namespace=\"ecomm-prod\"}[5m])) by (job)",
                "legendFormat": "{{job}}"
              }
            ],
            "yAxes": [
              {"label": "Requests/sec", "min": 0}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Response Time (95th percentile)",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{kubernetes_namespace=\"ecomm-prod\"}[5m])) by (le, job))",
                "legendFormat": "{{job}}"
              }
            ],
            "yAxes": [
              {"label": "Seconds", "min": 0}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{status=~\"5..\", kubernetes_namespace=\"ecomm-prod\"}[5m])) by (job) / sum(rate(http_requests_total{kubernetes_namespace=\"ecomm-prod\"}[5m])) by (job) * 100",
                "legendFormat": "{{job}}"
              }
            ],
            "yAxes": [
              {"label": "Error %", "min": 0}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 5,
            "title": "CPU Usage by Pod",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(container_cpu_usage_seconds_total{kubernetes_namespace=\"ecomm-prod\"}[5m])) by (pod) * 100",
                "legendFormat": "{{pod}}"
              }
            ],
            "yAxes": [
              {"label": "CPU %", "min": 0}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 6,
            "title": "Memory Usage by Pod",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(container_memory_usage_bytes{kubernetes_namespace=\"ecomm-prod\"}) by (pod) / 1024 / 1024",
                "legendFormat": "{{pod}}"
              }
            ],
            "yAxes": [
              {"label": "Memory MB", "min": 0}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          },
          {
            "id": 7,
            "title": "Redis Metrics",
            "type": "graph",
            "targets": [
              {
                "expr": "redis_connected_clients",
                "legendFormat": "Connected Clients"
              },
              {
                "expr": "redis_memory_used_bytes / 1024 / 1024",
                "legendFormat": "Memory Used (MB)"
              }
            ],
            "yAxes": [
              {"label": "Value", "min": 0}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 24}
          },
          {
            "id": 8,
            "title": "Pod Restarts",
            "type": "graph",
            "targets": [
              {
                "expr": "increase(kube_pod_container_status_restarts_total{kubernetes_namespace=\"ecomm-prod\"}[1h])",
                "legendFormat": "{{pod}}"
              }
            ],
            "yAxes": [
              {"label": "Restarts", "min": 0}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 24}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    } 